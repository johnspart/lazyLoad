buildscript {
    repositories {
        mavenCentral()
        maven {
            name = 'Sonatype Nexus Snapshots'
            url = 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
    }
    dependencies {
        classpath 'net.wasdev.wlp.gradle.plugins:liberty-gradle-plugin:1.1-SNAPSHOT'
    }
}


apply plugin: 'jacoco'
apply plugin: 'liberty'
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'


group = 'co.com.proteccion'

sourceCompatibility = 1.8
targetCompatibility = 1.8

[ compileJava, compileTestJava ]*.options*.encoding = 'UTF-8'

eclipse{
 	wtp{
  		facet{
  			facet name: 'jst.web', version: '3.1'
  		}
 	}
}

// In this section you declare where to find the dependencies of your project
repositories {
	mavenCentral()
	jcenter()
	mavenLocal()
	maven { url "http://public.dhe.ibm.com/ibmdl/export/pub/software/websphere/wasdev/maven/repository/" }
    flatDir {
			dirs 'lib'
	}
}
compileJava {options.encoding = "UTF-8"}
compileTestJava {options.encoding = "UTF-8"}



// In this section you declare the dependencies for your production and test code
dependencies {
	
	compile 'io.reactivex:rxjava:1.2.2'
	
	compile 'commons-logging:commons-logging:1.2'
	
	providedCompile 'com.ibm.tools.target:was-liberty:8.5.x.6'
	providedCompile 'javax.servlet:javax.servlet-api:3.0.1'
	providedCompile 'javax.ws.rs:javax.ws.rs-api:2.0.1'
	providedCompile 'javax:javaee-api:7.0'
	
	
	testCompile 'io.reactivex:rxjava:1.2.2'
	testCompile 'org.mockito:mockito-all:1.10.19'
	testCompile 'junit:junit:4.12'
}

 liberty {
      installDir = 'c:/wlp2'
      serverName = 'defaultServer'

      deploy {
          file = 'C:/John/workspaces/tech/lazyload/git/artefactos/lazy-load/build/libs/lazy-load.war'
      }
  }


jacoco {
	    toolVersion = "0.7.6.201602180812"
	    reportsDir = file("$buildDir/customJacocoReportDir")
	}
	
	test {
		reports.junitXml.destination="build/test-results"
	    jacoco {
	        append = false
	        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
	        classDumpFile = file("$buildDir/jacoco/classpathdumps")
	    }
	}
	
	jacocoTestReport {
	    reports {
	        xml.enabled false
	        csv.enabled false
	        html.destination "${buildDir}/jacocoHtml"
	    }
	}

